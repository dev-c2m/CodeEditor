//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.13.1
//     from Assets/InputFieldForCode/Scripts/InputActions/CodeEditorAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace C2M.CodeEditor
{
    /// <summary>
    /// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/InputFieldForCode/Scripts/InputActions/CodeEditorAction.inputactions".
    /// </summary>
    /// <remarks>
    /// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
    /// </remarks>
    /// <example>
    /// <code>
    /// using namespace UnityEngine;
    /// using UnityEngine.InputSystem;
    ///
    /// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
    /// public class Example : MonoBehaviour, MyActions.IPlayerActions
    /// {
    ///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
    ///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
    ///
    ///     void Awake()
    ///     {
    ///         m_Actions = new MyActions_Actions();              // Create asset object.
    ///         m_Player = m_Actions.Player;                      // Extract action map object.
    ///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
    ///     }
    ///
    ///     void OnDestroy()
    ///     {
    ///         m_Actions.Dispose();                              // Destroy asset object.
    ///     }
    ///
    ///     void OnEnable()
    ///     {
    ///         m_Player.Enable();                                // Enable all actions within map.
    ///     }
    ///
    ///     void OnDisable()
    ///     {
    ///         m_Player.Disable();                               // Disable all actions within map.
    ///     }
    ///
    ///     #region Interface implementation of MyActions.IPlayerActions
    ///
    ///     // Invoked when "Move" action is either started, performed or canceled.
    ///     public void OnMove(InputAction.CallbackContext context)
    ///     {
    ///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
    ///     }
    ///
    ///     // Invoked when "Attack" action is either started, performed or canceled.
    ///     public void OnAttack(InputAction.CallbackContext context)
    ///     {
    ///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
    ///     }
    ///
    ///     #endregion
    /// }
    /// </code>
    /// </example>
    public partial class @CodeEditorAction: IInputActionCollection2, IDisposable
    {
        /// <summary>
        /// Provides access to the underlying asset instance.
        /// </summary>
        public InputActionAsset asset { get; }

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public @CodeEditorAction()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""CodeEditorAction"",
    ""maps"": [
        {
            ""name"": ""CodeEditor_ShortCut"",
            ""id"": ""e11d6184-fcd4-4a25-847a-45e0c57df8ab"",
            ""actions"": [
                {
                    ""name"": ""Undo"",
                    ""type"": ""Button"",
                    ""id"": ""80f56da9-4f1f-462c-a9e2-da63fc3e7e08"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Redo2"",
                    ""type"": ""Button"",
                    ""id"": ""88c83f61-f33a-480e-a084-108a1c4e6b6a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Paste"",
                    ""type"": ""Button"",
                    ""id"": ""3901a90c-8852-4221-a924-82c88584e441"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UnIndent"",
                    ""type"": ""Button"",
                    ""id"": ""a273be4d-a6cf-4236-a509-360472479c7c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Redo"",
                    ""type"": ""Button"",
                    ""id"": ""7e515acb-1de2-4a69-a53d-7aa7be1fc9de"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Undo"",
                    ""id"": ""f6708f6c-ff66-4b27-bf42-518d3015f1e2"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Undo"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""ea7903bf-837e-483e-b6c4-111f09b9b894"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Undo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""e3b38298-8910-4839-9fd2-244a552ff15d"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Undo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Redo2"",
                    ""id"": ""5ae9466d-4abd-4f36-9194-3b5d879d71a9"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Redo2"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""0c60e2ed-54ef-46d1-a868-7fc358c9d401"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Redo2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""48fe7364-1ca9-4aaf-bf57-6216fa697611"",
                    ""path"": ""<Keyboard>/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Redo2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Paste"",
                    ""id"": ""983acf95-990e-4b0f-93e4-55233d5929e9"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Paste"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""41ebec8b-8919-4e19-8c0f-1d27303ff2cc"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Paste"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""9526434f-7f71-408e-afb2-63805aaf46c6"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Paste"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""UnIndent"",
                    ""id"": ""3de6cad7-36ad-4da2-b657-4dbf6a0ef542"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UnIndent"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""f151a76f-7c0d-4286-8575-dc49ded6cb54"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UnIndent"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""f76386ca-9bae-43e7-838c-79fb7e479f46"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UnIndent"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Two Modifiers"",
                    ""id"": ""6580ee1d-1cec-489e-b605-4cd049419978"",
                    ""path"": ""TwoModifiers"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Redo"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier1"",
                    ""id"": ""af2d4a54-6613-4a69-aa0a-5077252a40cc"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Redo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""modifier2"",
                    ""id"": ""2aa0bfa0-33d3-4c8b-9af1-ad9bf965c305"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Redo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""83d74807-7e2e-451a-ab4a-a516577fa3c4"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Redo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""CodeEditor_Normal"",
            ""id"": ""8c2b68e1-4dcb-4c6b-a3ae-775c31cc9ea4"",
            ""actions"": [
                {
                    ""name"": ""Tab"",
                    ""type"": ""Button"",
                    ""id"": ""7e4ff495-ddd6-4824-899f-0d83db3bdcba"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Enter"",
                    ""type"": ""Button"",
                    ""id"": ""f916b479-be6d-4a00-985e-6e6d6d5af910"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Backspace"",
                    ""type"": ""Button"",
                    ""id"": ""66085f4b-a521-4431-9e25-a37ca2714456"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""2ba4b277-616c-4afe-85af-ed3f8c19c7b1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""04c2d99b-e748-499f-a03e-eb56ee578f36"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cb25ddb5-ee55-4c9c-9287-a85f959067f2"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Enter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13d6a3aa-10e1-40fb-821e-b11cac66a2cb"",
                    ""path"": ""<Keyboard>/backspace"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Backspace"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5555c077-79be-41e0-973d-df3706a9bfb8"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CodeEditor_AutoComplete"",
            ""id"": ""64d5b7c2-0dfc-45df-8b7b-e5fe505a3283"",
            ""actions"": [
                {
                    ""name"": ""ArrowUp"",
                    ""type"": ""Button"",
                    ""id"": ""015b5c4a-90dd-493a-9f67-f431ccd16938"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ArrowDown"",
                    ""type"": ""Button"",
                    ""id"": ""b536e58d-3e81-4a48-b9d2-3a141794d58f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c8b53b9a-c2e7-46a3-85f1-14e47f5fe399"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ArrowUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4c32d84d-73a2-4142-832a-b0f14d84d9b5"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ArrowDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // CodeEditor_ShortCut
            m_CodeEditor_ShortCut = asset.FindActionMap("CodeEditor_ShortCut", throwIfNotFound: true);
            m_CodeEditor_ShortCut_Undo = m_CodeEditor_ShortCut.FindAction("Undo", throwIfNotFound: true);
            m_CodeEditor_ShortCut_Redo2 = m_CodeEditor_ShortCut.FindAction("Redo2", throwIfNotFound: true);
            m_CodeEditor_ShortCut_Paste = m_CodeEditor_ShortCut.FindAction("Paste", throwIfNotFound: true);
            m_CodeEditor_ShortCut_UnIndent = m_CodeEditor_ShortCut.FindAction("UnIndent", throwIfNotFound: true);
            m_CodeEditor_ShortCut_Redo = m_CodeEditor_ShortCut.FindAction("Redo", throwIfNotFound: true);
            // CodeEditor_Normal
            m_CodeEditor_Normal = asset.FindActionMap("CodeEditor_Normal", throwIfNotFound: true);
            m_CodeEditor_Normal_Tab = m_CodeEditor_Normal.FindAction("Tab", throwIfNotFound: true);
            m_CodeEditor_Normal_Enter = m_CodeEditor_Normal.FindAction("Enter", throwIfNotFound: true);
            m_CodeEditor_Normal_Backspace = m_CodeEditor_Normal.FindAction("Backspace", throwIfNotFound: true);
            m_CodeEditor_Normal_Escape = m_CodeEditor_Normal.FindAction("Escape", throwIfNotFound: true);
            // CodeEditor_AutoComplete
            m_CodeEditor_AutoComplete = asset.FindActionMap("CodeEditor_AutoComplete", throwIfNotFound: true);
            m_CodeEditor_AutoComplete_ArrowUp = m_CodeEditor_AutoComplete.FindAction("ArrowUp", throwIfNotFound: true);
            m_CodeEditor_AutoComplete_ArrowDown = m_CodeEditor_AutoComplete.FindAction("ArrowDown", throwIfNotFound: true);
        }

        ~@CodeEditorAction()
        {
            UnityEngine.Debug.Assert(!m_CodeEditor_ShortCut.enabled, "This will cause a leak and performance issues, CodeEditorAction.CodeEditor_ShortCut.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_CodeEditor_Normal.enabled, "This will cause a leak and performance issues, CodeEditorAction.CodeEditor_Normal.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_CodeEditor_AutoComplete.enabled, "This will cause a leak and performance issues, CodeEditorAction.CodeEditor_AutoComplete.Disable() has not been called.");
        }

        /// <summary>
        /// Destroys this asset and all associated <see cref="InputAction"/> instances.
        /// </summary>
        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
        public void Enable()
        {
            asset.Enable();
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
        public void Disable()
        {
            asset.Disable();
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
        public IEnumerable<InputBinding> bindings => asset.bindings;

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // CodeEditor_ShortCut
        private readonly InputActionMap m_CodeEditor_ShortCut;
        private List<ICodeEditor_ShortCutActions> m_CodeEditor_ShortCutActionsCallbackInterfaces = new List<ICodeEditor_ShortCutActions>();
        private readonly InputAction m_CodeEditor_ShortCut_Undo;
        private readonly InputAction m_CodeEditor_ShortCut_Redo2;
        private readonly InputAction m_CodeEditor_ShortCut_Paste;
        private readonly InputAction m_CodeEditor_ShortCut_UnIndent;
        private readonly InputAction m_CodeEditor_ShortCut_Redo;
        /// <summary>
        /// Provides access to input actions defined in input action map "CodeEditor_ShortCut".
        /// </summary>
        public struct CodeEditor_ShortCutActions
        {
            private @CodeEditorAction m_Wrapper;

            /// <summary>
            /// Construct a new instance of the input action map wrapper class.
            /// </summary>
            public CodeEditor_ShortCutActions(@CodeEditorAction wrapper) { m_Wrapper = wrapper; }
            /// <summary>
            /// Provides access to the underlying input action "CodeEditor_ShortCut/Undo".
            /// </summary>
            public InputAction @Undo => m_Wrapper.m_CodeEditor_ShortCut_Undo;
            /// <summary>
            /// Provides access to the underlying input action "CodeEditor_ShortCut/Redo2".
            /// </summary>
            public InputAction @Redo2 => m_Wrapper.m_CodeEditor_ShortCut_Redo2;
            /// <summary>
            /// Provides access to the underlying input action "CodeEditor_ShortCut/Paste".
            /// </summary>
            public InputAction @Paste => m_Wrapper.m_CodeEditor_ShortCut_Paste;
            /// <summary>
            /// Provides access to the underlying input action "CodeEditor_ShortCut/UnIndent".
            /// </summary>
            public InputAction @UnIndent => m_Wrapper.m_CodeEditor_ShortCut_UnIndent;
            /// <summary>
            /// Provides access to the underlying input action "CodeEditor_ShortCut/Redo".
            /// </summary>
            public InputAction @Redo => m_Wrapper.m_CodeEditor_ShortCut_Redo;
            /// <summary>
            /// Provides access to the underlying input action map instance.
            /// </summary>
            public InputActionMap Get() { return m_Wrapper.m_CodeEditor_ShortCut; }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
            public void Enable() { Get().Enable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
            public void Disable() { Get().Disable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
            public bool enabled => Get().enabled;
            /// <summary>
            /// Implicitly converts an <see ref="CodeEditor_ShortCutActions" /> to an <see ref="InputActionMap" /> instance.
            /// </summary>
            public static implicit operator InputActionMap(CodeEditor_ShortCutActions set) { return set.Get(); }
            /// <summary>
            /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <param name="instance">Callback instance.</param>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
            /// </remarks>
            /// <seealso cref="CodeEditor_ShortCutActions" />
            public void AddCallbacks(ICodeEditor_ShortCutActions instance)
            {
                if (instance == null || m_Wrapper.m_CodeEditor_ShortCutActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_CodeEditor_ShortCutActionsCallbackInterfaces.Add(instance);
                @Undo.started += instance.OnUndo;
                @Undo.performed += instance.OnUndo;
                @Undo.canceled += instance.OnUndo;
                @Redo2.started += instance.OnRedo2;
                @Redo2.performed += instance.OnRedo2;
                @Redo2.canceled += instance.OnRedo2;
                @Paste.started += instance.OnPaste;
                @Paste.performed += instance.OnPaste;
                @Paste.canceled += instance.OnPaste;
                @UnIndent.started += instance.OnUnIndent;
                @UnIndent.performed += instance.OnUnIndent;
                @UnIndent.canceled += instance.OnUnIndent;
                @Redo.started += instance.OnRedo;
                @Redo.performed += instance.OnRedo;
                @Redo.canceled += instance.OnRedo;
            }

            /// <summary>
            /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <remarks>
            /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
            /// </remarks>
            /// <seealso cref="CodeEditor_ShortCutActions" />
            private void UnregisterCallbacks(ICodeEditor_ShortCutActions instance)
            {
                @Undo.started -= instance.OnUndo;
                @Undo.performed -= instance.OnUndo;
                @Undo.canceled -= instance.OnUndo;
                @Redo2.started -= instance.OnRedo2;
                @Redo2.performed -= instance.OnRedo2;
                @Redo2.canceled -= instance.OnRedo2;
                @Paste.started -= instance.OnPaste;
                @Paste.performed -= instance.OnPaste;
                @Paste.canceled -= instance.OnPaste;
                @UnIndent.started -= instance.OnUnIndent;
                @UnIndent.performed -= instance.OnUnIndent;
                @UnIndent.canceled -= instance.OnUnIndent;
                @Redo.started -= instance.OnRedo;
                @Redo.performed -= instance.OnRedo;
                @Redo.canceled -= instance.OnRedo;
            }

            /// <summary>
            /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="CodeEditor_ShortCutActions.UnregisterCallbacks(ICodeEditor_ShortCutActions)" />.
            /// </summary>
            /// <seealso cref="CodeEditor_ShortCutActions.UnregisterCallbacks(ICodeEditor_ShortCutActions)" />
            public void RemoveCallbacks(ICodeEditor_ShortCutActions instance)
            {
                if (m_Wrapper.m_CodeEditor_ShortCutActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            /// <summary>
            /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
            /// </summary>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
            /// </remarks>
            /// <seealso cref="CodeEditor_ShortCutActions.AddCallbacks(ICodeEditor_ShortCutActions)" />
            /// <seealso cref="CodeEditor_ShortCutActions.RemoveCallbacks(ICodeEditor_ShortCutActions)" />
            /// <seealso cref="CodeEditor_ShortCutActions.UnregisterCallbacks(ICodeEditor_ShortCutActions)" />
            public void SetCallbacks(ICodeEditor_ShortCutActions instance)
            {
                foreach (var item in m_Wrapper.m_CodeEditor_ShortCutActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_CodeEditor_ShortCutActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        /// <summary>
        /// Provides a new <see cref="CodeEditor_ShortCutActions" /> instance referencing this action map.
        /// </summary>
        public CodeEditor_ShortCutActions @CodeEditor_ShortCut => new CodeEditor_ShortCutActions(this);

        // CodeEditor_Normal
        private readonly InputActionMap m_CodeEditor_Normal;
        private List<ICodeEditor_NormalActions> m_CodeEditor_NormalActionsCallbackInterfaces = new List<ICodeEditor_NormalActions>();
        private readonly InputAction m_CodeEditor_Normal_Tab;
        private readonly InputAction m_CodeEditor_Normal_Enter;
        private readonly InputAction m_CodeEditor_Normal_Backspace;
        private readonly InputAction m_CodeEditor_Normal_Escape;
        /// <summary>
        /// Provides access to input actions defined in input action map "CodeEditor_Normal".
        /// </summary>
        public struct CodeEditor_NormalActions
        {
            private @CodeEditorAction m_Wrapper;

            /// <summary>
            /// Construct a new instance of the input action map wrapper class.
            /// </summary>
            public CodeEditor_NormalActions(@CodeEditorAction wrapper) { m_Wrapper = wrapper; }
            /// <summary>
            /// Provides access to the underlying input action "CodeEditor_Normal/Tab".
            /// </summary>
            public InputAction @Tab => m_Wrapper.m_CodeEditor_Normal_Tab;
            /// <summary>
            /// Provides access to the underlying input action "CodeEditor_Normal/Enter".
            /// </summary>
            public InputAction @Enter => m_Wrapper.m_CodeEditor_Normal_Enter;
            /// <summary>
            /// Provides access to the underlying input action "CodeEditor_Normal/Backspace".
            /// </summary>
            public InputAction @Backspace => m_Wrapper.m_CodeEditor_Normal_Backspace;
            /// <summary>
            /// Provides access to the underlying input action "CodeEditor_Normal/Escape".
            /// </summary>
            public InputAction @Escape => m_Wrapper.m_CodeEditor_Normal_Escape;
            /// <summary>
            /// Provides access to the underlying input action map instance.
            /// </summary>
            public InputActionMap Get() { return m_Wrapper.m_CodeEditor_Normal; }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
            public void Enable() { Get().Enable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
            public void Disable() { Get().Disable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
            public bool enabled => Get().enabled;
            /// <summary>
            /// Implicitly converts an <see ref="CodeEditor_NormalActions" /> to an <see ref="InputActionMap" /> instance.
            /// </summary>
            public static implicit operator InputActionMap(CodeEditor_NormalActions set) { return set.Get(); }
            /// <summary>
            /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <param name="instance">Callback instance.</param>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
            /// </remarks>
            /// <seealso cref="CodeEditor_NormalActions" />
            public void AddCallbacks(ICodeEditor_NormalActions instance)
            {
                if (instance == null || m_Wrapper.m_CodeEditor_NormalActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_CodeEditor_NormalActionsCallbackInterfaces.Add(instance);
                @Tab.started += instance.OnTab;
                @Tab.performed += instance.OnTab;
                @Tab.canceled += instance.OnTab;
                @Enter.started += instance.OnEnter;
                @Enter.performed += instance.OnEnter;
                @Enter.canceled += instance.OnEnter;
                @Backspace.started += instance.OnBackspace;
                @Backspace.performed += instance.OnBackspace;
                @Backspace.canceled += instance.OnBackspace;
                @Escape.started += instance.OnEscape;
                @Escape.performed += instance.OnEscape;
                @Escape.canceled += instance.OnEscape;
            }

            /// <summary>
            /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <remarks>
            /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
            /// </remarks>
            /// <seealso cref="CodeEditor_NormalActions" />
            private void UnregisterCallbacks(ICodeEditor_NormalActions instance)
            {
                @Tab.started -= instance.OnTab;
                @Tab.performed -= instance.OnTab;
                @Tab.canceled -= instance.OnTab;
                @Enter.started -= instance.OnEnter;
                @Enter.performed -= instance.OnEnter;
                @Enter.canceled -= instance.OnEnter;
                @Backspace.started -= instance.OnBackspace;
                @Backspace.performed -= instance.OnBackspace;
                @Backspace.canceled -= instance.OnBackspace;
                @Escape.started -= instance.OnEscape;
                @Escape.performed -= instance.OnEscape;
                @Escape.canceled -= instance.OnEscape;
            }

            /// <summary>
            /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="CodeEditor_NormalActions.UnregisterCallbacks(ICodeEditor_NormalActions)" />.
            /// </summary>
            /// <seealso cref="CodeEditor_NormalActions.UnregisterCallbacks(ICodeEditor_NormalActions)" />
            public void RemoveCallbacks(ICodeEditor_NormalActions instance)
            {
                if (m_Wrapper.m_CodeEditor_NormalActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            /// <summary>
            /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
            /// </summary>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
            /// </remarks>
            /// <seealso cref="CodeEditor_NormalActions.AddCallbacks(ICodeEditor_NormalActions)" />
            /// <seealso cref="CodeEditor_NormalActions.RemoveCallbacks(ICodeEditor_NormalActions)" />
            /// <seealso cref="CodeEditor_NormalActions.UnregisterCallbacks(ICodeEditor_NormalActions)" />
            public void SetCallbacks(ICodeEditor_NormalActions instance)
            {
                foreach (var item in m_Wrapper.m_CodeEditor_NormalActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_CodeEditor_NormalActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        /// <summary>
        /// Provides a new <see cref="CodeEditor_NormalActions" /> instance referencing this action map.
        /// </summary>
        public CodeEditor_NormalActions @CodeEditor_Normal => new CodeEditor_NormalActions(this);

        // CodeEditor_AutoComplete
        private readonly InputActionMap m_CodeEditor_AutoComplete;
        private List<ICodeEditor_AutoCompleteActions> m_CodeEditor_AutoCompleteActionsCallbackInterfaces = new List<ICodeEditor_AutoCompleteActions>();
        private readonly InputAction m_CodeEditor_AutoComplete_ArrowUp;
        private readonly InputAction m_CodeEditor_AutoComplete_ArrowDown;
        /// <summary>
        /// Provides access to input actions defined in input action map "CodeEditor_AutoComplete".
        /// </summary>
        public struct CodeEditor_AutoCompleteActions
        {
            private @CodeEditorAction m_Wrapper;

            /// <summary>
            /// Construct a new instance of the input action map wrapper class.
            /// </summary>
            public CodeEditor_AutoCompleteActions(@CodeEditorAction wrapper) { m_Wrapper = wrapper; }
            /// <summary>
            /// Provides access to the underlying input action "CodeEditor_AutoComplete/ArrowUp".
            /// </summary>
            public InputAction @ArrowUp => m_Wrapper.m_CodeEditor_AutoComplete_ArrowUp;
            /// <summary>
            /// Provides access to the underlying input action "CodeEditor_AutoComplete/ArrowDown".
            /// </summary>
            public InputAction @ArrowDown => m_Wrapper.m_CodeEditor_AutoComplete_ArrowDown;
            /// <summary>
            /// Provides access to the underlying input action map instance.
            /// </summary>
            public InputActionMap Get() { return m_Wrapper.m_CodeEditor_AutoComplete; }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
            public void Enable() { Get().Enable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
            public void Disable() { Get().Disable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
            public bool enabled => Get().enabled;
            /// <summary>
            /// Implicitly converts an <see ref="CodeEditor_AutoCompleteActions" /> to an <see ref="InputActionMap" /> instance.
            /// </summary>
            public static implicit operator InputActionMap(CodeEditor_AutoCompleteActions set) { return set.Get(); }
            /// <summary>
            /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <param name="instance">Callback instance.</param>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
            /// </remarks>
            /// <seealso cref="CodeEditor_AutoCompleteActions" />
            public void AddCallbacks(ICodeEditor_AutoCompleteActions instance)
            {
                if (instance == null || m_Wrapper.m_CodeEditor_AutoCompleteActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_CodeEditor_AutoCompleteActionsCallbackInterfaces.Add(instance);
                @ArrowUp.started += instance.OnArrowUp;
                @ArrowUp.performed += instance.OnArrowUp;
                @ArrowUp.canceled += instance.OnArrowUp;
                @ArrowDown.started += instance.OnArrowDown;
                @ArrowDown.performed += instance.OnArrowDown;
                @ArrowDown.canceled += instance.OnArrowDown;
            }

            /// <summary>
            /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <remarks>
            /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
            /// </remarks>
            /// <seealso cref="CodeEditor_AutoCompleteActions" />
            private void UnregisterCallbacks(ICodeEditor_AutoCompleteActions instance)
            {
                @ArrowUp.started -= instance.OnArrowUp;
                @ArrowUp.performed -= instance.OnArrowUp;
                @ArrowUp.canceled -= instance.OnArrowUp;
                @ArrowDown.started -= instance.OnArrowDown;
                @ArrowDown.performed -= instance.OnArrowDown;
                @ArrowDown.canceled -= instance.OnArrowDown;
            }

            /// <summary>
            /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="CodeEditor_AutoCompleteActions.UnregisterCallbacks(ICodeEditor_AutoCompleteActions)" />.
            /// </summary>
            /// <seealso cref="CodeEditor_AutoCompleteActions.UnregisterCallbacks(ICodeEditor_AutoCompleteActions)" />
            public void RemoveCallbacks(ICodeEditor_AutoCompleteActions instance)
            {
                if (m_Wrapper.m_CodeEditor_AutoCompleteActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            /// <summary>
            /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
            /// </summary>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
            /// </remarks>
            /// <seealso cref="CodeEditor_AutoCompleteActions.AddCallbacks(ICodeEditor_AutoCompleteActions)" />
            /// <seealso cref="CodeEditor_AutoCompleteActions.RemoveCallbacks(ICodeEditor_AutoCompleteActions)" />
            /// <seealso cref="CodeEditor_AutoCompleteActions.UnregisterCallbacks(ICodeEditor_AutoCompleteActions)" />
            public void SetCallbacks(ICodeEditor_AutoCompleteActions instance)
            {
                foreach (var item in m_Wrapper.m_CodeEditor_AutoCompleteActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_CodeEditor_AutoCompleteActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        /// <summary>
        /// Provides a new <see cref="CodeEditor_AutoCompleteActions" /> instance referencing this action map.
        /// </summary>
        public CodeEditor_AutoCompleteActions @CodeEditor_AutoComplete => new CodeEditor_AutoCompleteActions(this);
        /// <summary>
        /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "CodeEditor_ShortCut" which allows adding and removing callbacks.
        /// </summary>
        /// <seealso cref="CodeEditor_ShortCutActions.AddCallbacks(ICodeEditor_ShortCutActions)" />
        /// <seealso cref="CodeEditor_ShortCutActions.RemoveCallbacks(ICodeEditor_ShortCutActions)" />
        public interface ICodeEditor_ShortCutActions
        {
            /// <summary>
            /// Method invoked when associated input action "Undo" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnUndo(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "Redo2" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnRedo2(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "Paste" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnPaste(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "UnIndent" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnUnIndent(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "Redo" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnRedo(InputAction.CallbackContext context);
        }
        /// <summary>
        /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "CodeEditor_Normal" which allows adding and removing callbacks.
        /// </summary>
        /// <seealso cref="CodeEditor_NormalActions.AddCallbacks(ICodeEditor_NormalActions)" />
        /// <seealso cref="CodeEditor_NormalActions.RemoveCallbacks(ICodeEditor_NormalActions)" />
        public interface ICodeEditor_NormalActions
        {
            /// <summary>
            /// Method invoked when associated input action "Tab" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnTab(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "Enter" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnEnter(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "Backspace" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnBackspace(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "Escape" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnEscape(InputAction.CallbackContext context);
        }
        /// <summary>
        /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "CodeEditor_AutoComplete" which allows adding and removing callbacks.
        /// </summary>
        /// <seealso cref="CodeEditor_AutoCompleteActions.AddCallbacks(ICodeEditor_AutoCompleteActions)" />
        /// <seealso cref="CodeEditor_AutoCompleteActions.RemoveCallbacks(ICodeEditor_AutoCompleteActions)" />
        public interface ICodeEditor_AutoCompleteActions
        {
            /// <summary>
            /// Method invoked when associated input action "ArrowUp" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnArrowUp(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "ArrowDown" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnArrowDown(InputAction.CallbackContext context);
        }
    }
}
